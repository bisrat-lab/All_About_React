React 
let/const 
let==> is a signal that the variable may be reassigned
const ==> is a signal that the identifier won’t be reassigned

Arrow Functions:
Arrow syntax automatically binds this to the surrounding code's context. 
    ==> The syntax allows an implicit return when there is no body block
    ==> resulting in shorter and simpler code in some cases

==> this in Arrow Functions
==> they did not rebind this 
    There are no binding of this
    ==>this keyword in arrow functions always represents the object that defined the arrow function
Component: 


==>Exports statement is used when creating JavaScript
modules to export live bindings to functions, objects, or
primitive values from the module so they can be used by
other programs
there are 2 types named Export and default Export
export ==> use {} to import 
    ==> name must be same when importing 
    ==> muiltiple export allowed 
    
export defult => with out {} to import 
    ==> and only one allowed in one file 

==>Import statement is used to import bindings that are exported by another module

*********************************************************
React 
==> React is a JavaScript library for building user unterface 
----------------------------------
React.creatingElement takes three parameter 
 React.createElement(type, [props], [...children]);
1. the element('div','h1','p')
2. the option properties object{}
3. our children
 return creatingElement('div',{className: "app"},"welcome") 

 ==> jsx 
 => Your browser doesn't understand JSX by default. Your browser only understands JavaScript. 
    - Babel ultimately converts it to vanilla JS for the browser to understand it 
   * It is used to write an XML like code for elements and components 
   * JSX allows us to write HTML elements in JavaScript

React Components-------------
Building blocks of react app
->Components let you split the UI into independent, reusable pieces.

Class-Based Component
•Inherits from React.Component
•Should override render() method
•Aka containers, smart, stateful

Functional Components
•Purely presentational
•Represented by a function
•Returns React element
•Aka stateless, dumb, presentational
•90% cleaner code than class components.
•Class components are more complex. 